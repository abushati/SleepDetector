from scipy.spatial import distance
from imutils import face_utils
import imutils
import dlib
import cv2
from flask import Flask, render_template, Response
from picamera.array import PiRGBArray
from picamera import PiCamera
import time

def eye_aspect_ratio(eye):
	A = distance.euclidean(eye[1], eye[5])
	B = distance.euclidean(eye[2], eye[4])
	C = distance.euclidean(eye[0], eye[3])
	ear = (A + B) / (2.0 * C)
	return ear


app = Flask(__name__)

@app.route('/')
def index():
    """Video streaming"""
        return render_template('index.html')

def gen():
        camera = PiCamera()
        camera.resolution = (640, 480)
        camera.framerate = 32
        rawCapture = PiRGBArray(camera,size=(640, 480))
        """Video streaming generator function."""
        thresh = 0.25
        frame_check = 20
        detect = dlib.get_frontal_face_detector()
        predict = dlib.shape_predictor("/home/pi/Camera/shape_predictor_68_face_landmarks.dat")# Dat file is the crux of the code
        (lStart, lEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["left_eye"]
        (rStart, rEnd) = face_utils.FACIAL_LANDMARKS_68_IDXS["right_eye"]
        flag=0
        time.sleep(0.1)
        for frames in camera.capture_continuous(rawCapture, format="bgr", use_video_port=True):
        # grab the raw NumPy array representing the image, then initialize the timestamp
        # and occupied/unoccupied text
                
                rawCapture.truncate(0)
                frame = imutils.resize(frame, width=480)
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                subjects = detect(gray, 0)
                for subject in subjects:
                        shape = predict(gray, subject)
                        shape = face_utils.shape_to_np(shape)#converting to NumPy Array
                        leftEye = shape[lStart:lEnd]
                        rightEye = shape[rStart:rEnd]
                        leftEAR = eye_aspect_ratio(leftEye)
                        rightEAR = eye_aspect_ratio(rightEye)
                        ear = (leftEAR + rightEAR) / 2.0
                        leftEyeHull = cv2.convexHull(leftEye)
                        rightEyeHull = cv2.convexHull(rightEye) 
                        cv2.drawContours(frame, [leftEyeHull], -1, (0, 255, 0), 1)
                        cv2.drawContours(frame, [rightEyeHull], -1, (0, 255, 0), 1)
                        if ear < thresh:
                                flag += 1
                                print (flag)
                                if flag >= frame_check:
                                        cv2.putText(frame, "****************ALERT!****************", (10, 30),
                                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                                        cv2.putText(frame, "****************ALERT!****************", (10,325),
                                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                                        #print ("Drowsy")
                        else:
                                flag = 0
                        #cv2.imwrite('t.jpg', frame)
                        ret,jpeg = cv2.imencode('.jpg',frame)
                        frame = jpeg.tobytes()
        #yield expression is directly sent to the browser
                        yield (b'--frame\r\n'
                                b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')
        
        #the frame is being saved with file name t.jpg
        
 #opens the saved jpg file
                

@app.route('/video_feed')
def video_feed():
    """Video streaming route. Put this in the src attribute of an img tag."""
        return Response(gen(),
                        mimetype='multipart/x-mixed-replace; boundary=frame')


if __name__ == '__main__':
	app.run(host="0.0.0.0")